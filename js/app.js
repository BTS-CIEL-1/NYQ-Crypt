// D√©finir une cl√© commune utilis√©e pour toutes les √©tapes
const COMMON_KEY = "MaCleSecreteCommun-celaDoitEtreLongueEtSecurisee";

// S√©lection des √©l√©ments HTML
const textInput = document.getElementById("texteInput");
const encryptBtn = document.getElementById("btnChiffrer");
const decryptBtn = document.getElementById("btnDechiffrer");
const resultText = document.getElementById("resultat");
const fileInput = document.getElementById('fileInput');

fileInput.addEventListener('change', function () {
  const file = this.files[0];
  if (file && file.type === "text/plain") {
    const reader = new FileReader();
    reader.onload = function (e) {
      textInput.value = e.target.result;
    };
    reader.readAsText(file);
  } else {
    alert("Veuillez s√©lectionner un fichier texte (.txt).");
  }
});


// ----------------------------
// üîê **M√©thodes de cryptage multi-√©tapes**
// ----------------------------

// 1Ô∏è‚É£ **Chiffrement C√©sar**
function chiffrerCesar(texte, cle) {
    const decalage = 5; // Fixe un d√©calage standard
    return texte
        .split("")
        .map((char) => String.fromCharCode(char.charCodeAt(0) + decalage))
        .join("");
}

function dechiffrerCesar(texte, cle) {
    const decalage = 5;
    return texte
        .split("")
        .map((char) => String.fromCharCode(char.charCodeAt(0) - decalage))
        .join("");
}

// 2Ô∏è‚É£ **Chiffrement XOR**
function chiffrerXOR(texte, cle) {
    return texte
        .split("")
        .map((char, index) => String.fromCharCode(char.charCodeAt(0) ^ cle.charCodeAt(index % cle.length)))
        .join("");
}

function dechiffrerXOR(texte, cle) {
    return chiffrerXOR(texte, cle); // XOR est r√©versible
}

// 3Ô∏è‚É£ **Encodage Base64**
function chiffrerBase64(texte) {
    return btoa(unescape(encodeURIComponent(texte))); // G√®re correctement les caract√®res sp√©ciaux
}

function dechiffrerBase64(texte) {
    return decodeURIComponent(escape(atob(texte))); // G√®re les erreurs d'affichage et les caract√®res corrompus
}

// ----------------------------
// üîÑ **Gestion du cryptage/d√©chiffrement**
// ----------------------------

// **Chiffrement en 3 √©tapes**
function encrypt() {
    const key = COMMON_KEY;
    let text = textInput.value;

    if (!text) {
        alert("Veuillez entrer du texte √† crypter.");
        return;
    }

    console.log("Texte original :", text);

    // √âtape 1 : Chiffrement C√©sar
    text = chiffrerCesar(text, key);
    console.log("Apr√®s C√©sar :", text);

    // √âtape 2 : Chiffrement XOR
    text = chiffrerXOR(text, key);
    console.log("Apr√®s XOR :", text);

    // √âtape 3 : Encodage Base64
    text = chiffrerBase64(text);
    console.log("Apr√®s Base64 :", text);

    resultText.value = text;
}

// **D√©chiffrement en 3 √©tapes (ordre inverse)**
function decrypt() {
    const key = COMMON_KEY;
    let text = resultText.value;

    if (!text) {
        alert("Veuillez entrer du texte √† d√©crypter.");
        return;
    }

    console.log("Texte crypt√© :", text);

    // √âtape 1 : D√©codage Base64
    text = dechiffrerBase64(text);
    console.log("Apr√®s Base64 :", text);

    // √âtape 2 : D√©chiffrement XOR
    text = dechiffrerXOR(text, key);
    console.log("Apr√®s XOR :", text);

    // √âtape 3 : D√©chiffrement C√©sar
    text = dechiffrerCesar(text, key);
    console.log("Apr√®s C√©sar :", text);

    resultText.value = text;
}

// ----------------------------
// üîò **√âcoute des boutons**
// ----------------------------
encryptBtn.addEventListener("click", encrypt);
decryptBtn.addEventListener("click", decrypt);